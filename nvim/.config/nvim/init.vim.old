"autocmd vimenter * ++nested colorscheme gruvbox
"autocmd BufEnter *.md ++nested set spell
"autocmd BufLeave *.md ++nested set spell
"set spelllang=pt_br,en
"set mouse=a
"set tabstop=2
"set shiftwidth=2
"set expandtab
"set smartindent
"set autoindent
"set nu
"set rnu
"set clipboard^=unnamed,unnamedplus
"set wrap linebreak
"set splitbelow
"set splitright
"set foldmethod=indent
"set nofoldenable
"set listchars=space:Â·
"set list
"set so=5
"set nohlsearch
"set noswapfile
"set nobackup
"set nowb
"autocmd FileType * set formatoptions-=cro

"let g:python3_host_prog = '/home/illfate/.pyenv/versions/nvim/bin/python'
"let g:ruby_host_prog = '/home/illfate/.asdf/installs/ruby/3.1.1/bin/ruby'
"let g:mapleader = ' '
"let g:gitblame_enabled = 1
"let g:gitblame_date_format = '%d/%m/%y %H:%M'
"let g:codi#virtual_text = 0

"augroup CursorLine
"au!
"au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
"au WinLeave * setlocal nocursorline
"augroup END

"nmap <silent> <C-s> :w<CR>
"nnoremap <silent><C-e> :lua require("harpoon.ui").toggle_quick_menu()<CR>
"nnoremap <silent> Q <nop>
"nnoremap <silent><Leader>a :lua require("harpoon.mark").add_file()<CR>

"nmap <Leader>h <cmd>UndotreeShow<cr>
"nmap <Leader>ff <cmd>Telescope find_files<cr>
"nmap <Leader>fg <cmd>Telescope live_grep<cr>
"nmap <Leader>fb <cmd>Telescope buffers<cr>
"nmap <Leader>w <cmd>HopWord<cr>
"nmap <Leader>l <cmd>HopLine<cr>
"nmap <Leader>s <cmd>Codi javascript<cr>
"nmap <silent> <Leader>1 :TestFile<CR>
"nmap <silent> <Leader>2 :TestNearest<CR>
"nmap <silent> <Leader>3 :TestLast<CR>
"nmap <silent> <Leader>4 :TestSuite<CR>
"nmap <Leader><Leader>x :call Save_and_exec()<CR>

function! Save_and_exec() abort
    if &filetype == 'vim'
      :silent! write
      :source %
    elseif &filetype == 'lua'
      :silent! write
      :luafile %
    endif

    return
endfunction

"call plug#begin()
"Plug 'tjdevries/colorbuddy.vim'
"Plug 'tjdevries/gruvbuddy.nvim'
"Plug 'tjdevries/train.nvim'
"Plug 'azadkuh/vim-cmus'
"Plug 'nvim-telescope/telescope.nvim'
"Plug 'nvim-lua/popup.nvim'
"Plug 'nvim-lua/plenary.nvim'
"Plug 'nvim-telescope/telescope-fzy-native.nvim'
"Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
"Plug 'hrsh7th/nvim-cmp'
"Plug 'hrsh7th/cmp-nvim-lsp'
"Plug 'hrsh7th/cmp-buffer'
"Plug 'hrsh7th/cmp-path'
"Plug 'neovim/nvim-lspconfig'
"Plug 'morhetz/gruvbox'
"Plug 'sbdchd/neoformat'
"Plug 'mbbill/undotree'
"Plug 'mattn/emmet-vim'
"Plug 'ThePrimeAgen/harpoon'
"Plug 'windwp/nvim-autopairs'
"Plug 'ThePrimeAgen/vim-be-good'
"Plug 'leafo/moonscript-vim'
"Plug 'johngrib/vim-game-code-break'
"Plug 'johngrib/vim-game-snake'
"Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install'  }
"Plug 'f-person/git-blame.nvim'
"Plug 'metakirby5/codi.vim'
"Plug 'phaazon/hop.nvim'
"Plug 'vim-airline/vim-airline'
"Plug 'vim-test/vim-test'
"Plug 'tpope/vim-rails'
"Plug 'tpope/vim-fugitive'
"Plug 'L3MON4D3/LuaSnip'
"Plug 'saadparwaiz1/cmp_luasnip'
"Plug 'rafamadriz/friendly-snippets'
"Plug '~/misc/neovim-plugins/cmusp.nvim/'
"Plug '~/misc/neovim-plugins/dock.nvim/'
"call plug#end()

lua << EOF
require('mat')
require('globals')
require('luasnip.loaders.from_vscode').lazy_load()
require('hop').setup()
require('nvim-treesitter.configs').setup({ 
  highlight = { enable = true },
  incremental_selection = { enable = true },
  textobjects = { enable = true },
  additional_vim_regex_highlighting = false,
})
--local opts = { noremap=true, silent=true }
--vim.api.nvim_set_keymap('n', '<space>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
--vim.api.nvim_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
--vim.api.nvim_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
--vim.api.nvim_set_keymap('n', '<space>q', '<cmd>lua vim.diagnostic.setloclist()<CR>', opts)
--
--local on_attach = function(client, bufnr)
--  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')
--  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
--  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<F2>', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
--  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
--end
--
--local cmp = require('cmp')
--cmp.setup({
--  snippet = {
--    expand = function(args)
--      require('luasnip').lsp_expand(args.body)
--    end,
--  },
--  mapping = cmp.mapping.preset.insert({
--    ['<C-b>'] = cmp.mapping.scroll_docs(-4),
--    ['<C-f>'] = cmp.mapping.scroll_docs(4),
--    ['<C-Space>'] = cmp.mapping.complete(),
--    ['<ESC>'] = cmp.mapping.abort(),
--    ['<CR>'] = cmp.mapping.confirm(),
--    ['<Tab>'] = cmp.mapping(function(fallback)
--      if cmp.visible() then
--        cmp.select_next_item()
--      else
--        fallback()
--      end
--    end, { "i", "s" }),
--    ['<S-Tab>'] = cmp.mapping(function(fallback)
--      if cmp.visible() then
--        cmp.select_prev_item()
--      else
--        fallback()
--      end
--    end, { "i", "s" }),
--  }),
--  sources = cmp.config.sources({
--    { name = 'nvim_lsp' },
--    { name = 'luasnip' },
--    { name = 'buffer' },
--    { name = 'path',
--      option = {
--          trailing_slash = true,
--
--        }
--    }
--  })
--})
--
--local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
--
--local servers = { 'pyright', 'rust_analyzer', 'tsserver', 'solargraph', 'ocamllsp' }
--for _, lsp in pairs(servers) do
--  require('lspconfig')[lsp].setup {
--    capabilities = capabilities,
--    on_attach = on_attach,
--    flags = {
--      debounce_text_changes = 150,
--    },
--  }
--end

--require('lspconfig').sumneko_lua.setup({
--  capabilities = capabilities,
--  on_attach = on_attach,
--  flags = {
--    debounce_text_changes = 150,
--    },
--  settings = {
--    Lua = {
--      diagnostics = {
--        globals = {'vim'}
--        },
--      workspace = {
--        library = vim.api.nvim_get_runtime_file("", true),
--        },
--      }
--    }
--})

--require('lspconfig').elixirls.setup({
--  capabilities = capabilities,
--  on_attach = on_attach,
--  flags = {
--    debounce_text_changes = 150,
--    },
--  cmd = { '/home/illfate/elixir-ls/language_server.sh' }
--})

require('nvim-autopairs').setup{}
require('telescope').setup({
  defaults = {
    file_previewer = require('telescope.previewers').vim_buffer_cat.new,
    grep_previewer = require("telescope.previewers").vim_buffer_vimgrep.new,
    },
  extensions = {
    fzy_native = {
      override_generic_sorter = false,
      override_file_sorter = true,
      }
    }
})

vim.diagnostic.config({
  virtual_text = false,
  signs = true,
  severity_sort = true
})
EOF
